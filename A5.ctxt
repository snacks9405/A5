#BlueJ class context
comment0.target=A5
comment1.params=fileName
comment1.target=void\ loadWords(java.lang.String)
comment1.text=\n\ \ Given\ the\ name\ of\ a\ text\ file,\ loads\ the\ words\ contained\n\ \ in\ that\ file\ into\ the\ dict\ data\ structure.\ You\ should\ assume\n\ \ that\ if\ the\ file\ exists,\ it\ contains\ only\ words\ made\ up\ of\n\ \ upper-\ and/or\ lowercase\ letters\ separated\ by\ the\ default\ delimiter\n\ \ characters\ (e.g.,\ blank\ space,\ newline\ character,\ etc.).\ In\ the\ end,\n\ \ dict\ may\ only\ contain\ words\ in\ all\ lowercase\ letters\ with\ no\ duplicates.\ \n\ \ If\ the\ file\ does\ not\ exist,\ a\ clear\ message\ must\ be\ printed\ on\ the\ \n\ \ terminal\ before\ terminating\ the\ program.\ \n\ \ \n\ \ Does\ NOT\ send\ any\ output\ to\ the\ terminal\ if\ the\ input\ file\ exists.\n\ \ \ \n\ \ @param\ fileName\ \ \ name\ of\ the\ text\ file\ of\ words\n
comment2.params=word
comment2.target=void\ findNeighbors(java.lang.String)
comment2.text=\n\ \ Given\ a\ word\ in\ dict,\ insert\ an\ entry\ into\ the\ neighbors\ data\ structure\n\ \ with\ this\ word\ as\ the\ key\ and\ the\ non-empty,\ alphabetized\ list\ of\ all\ of\ the\ word's\ \n\ \ neighbors\ as\ the\ value,\ where\ a\ neighbor\ of\ a\ word\ w\ is\ any\ other\ word\ in\ dict\ \n\ \ that\ is\ obtained\ by\ replacing\ exactly\ (any)\ one\ letter\ in\ w\ by\ another\ letter.\n\ \ Does\ not\ modify\ neighbors\ if\ the\ given\ word\ has\ no\ neighbors\ in\ dict.\n\ \ \n\ \ Does\ NOT\ send\ any\ output\ to\ the\ terminal.\n\ \ \n\ \ @param\ word\ \ \ the\ word\ whose\ neighbors\ you\ must\ determine\ and\ store\ in\ neighbors\n
comment3.params=
comment3.target=void\ findAllNeighbors()
comment3.text=\n\ \ Populates\ the\ neighbors\ data\ structure\ with\ an\ entry\ for\ each\ one\ of\ the\ words\ in\ \n\ \ dict\ whose\ neighbors\ list\ is\ not\ empty.\n\ \ \n\ \ Does\ NOT\ send\ any\ output\ to\ the\ terminal.\n
comment4.params=
comment4.target=void\ printAllNeighbors()
comment4.text=\n\ \ Sends\ the\ contents\ of\ the\ neighbors\ data\ structure\ to\ the\ terminal.\n\ \ The\ required\ format\ of\ this\ output\ is\ described\ in\ the\ handout\ for\ this\n\ \ assignment.\n
comment5.params=start\ finish
comment5.target=java.util.ArrayList\ findSequence(java.lang.String,\ java.lang.String)
comment5.text=\n\ \ Returns\ a\ sequence\ connecting\ the\ two\ given\ words,\ where\ a\ sequence\ is\ a\ list\n\ \ of\ words\ with\ each\ word\ (except\ the\ first\ one)\ being\ a\ neighbor\ of\ the\ preceding\n\ \ word;\ or\ returns\ null\ if\ no\ such\ sequence\ exists\ (based\ on\ the\ dictionary\ used).\n\ \ \n\ \ Does\ NOT\ send\ any\ output\ to\ the\ terminal.\n\ \ \n\ \ @param\ \ start\ \ \ the\ word\ that\ must\ appear\ first\ in\ the\ sequence\n\ \ @param\ \ finish\ \ the\ word\ that\ must\ appear\ last\ in\ the\ sequence\n\ \ \n\ \ For\ full\ credit,\ your\ method\ must\ implement\ the\ following\ algorithm\:\n\ \ \ +\ you\ must\ use\ a\ basic\ (i.e.,\ FIFO)\ queue,\ called\ q,\ containing\ ArrayList<String>\n\ \ \ \ \ instances;\ each\ array\ list\ will\ be\ a\ partial\ sequence\ starting\ with\ the\ start\ \n\ \ \ \ \ word\n\ \ \ +\ initialize\ q\ to\ contain\ a\ single\ ArrayList\ with\ start\ as\ its\ only\ element\ \n\ \ \ +\ you\ will\ implement\ a\ loop\ that\ terminates\ when\ the\ first\ sequence\ ending\ in\ \n\ \ \ \ \ the\ finish\ word\ is\ about\ to\ be\ added\ to\ q\ or\ when\ q\ is\ empty\ (in\ the\ latter\ case,\n\ \ \ \ \ the\ method\ must\ return\ null).\n\ \ \ +\ during\ each\ iteration,\ you\ must\:\n\ \ \ \ \ \ \ +\ dequeue\ the\ first\ element\ (i.e.,\ ArrayList)\ of\ q;\ call\ this\ element\ 'current'\n\ \ \ \ \ \ \ +\ find\ the\ list\ of\ neighbors\ of\ current's\ last\ element\n\ \ \ \ \ \ \ \ \ \ \ +\ if\ one\ of\ them\ is\ the\ finish\ word,\ return\ current\ with\ this\ word\ added\ at\n\ \ \ \ \ \ \ \ \ \ \ \ \ the\ end\n\ \ \ \ \ \ \ \ \ \ \ +\ if\ this\ list\ is\ empty,\ end\ the\ iteration\ since\ there\ is\ no\ way\ to\ \n\ \ \ \ \ \ \ \ \ \ \ \ \ extend\ the\ current\ partial\ sequence\n\ \ \ \ \ \ \ \ \ \ \ +\ otherwise,\ for\ each\ neighbor\ n\ in\ the\ list\:\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\ make\ a\ copy\ of\ current\ and\ add\ n\ at\ the\ end\ of\ this\ copy\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ +\ enqueue\ the\ resulting\ ArrayList\ into\ q\n\ \ \ \n\ \ This\ method\ may\ ONLY\ use\ the\ Queue\ (not\ Deque,\ etc.)\ methods\ that\ do\ NOT\ throw\n\ \ any\ exceptions.\n\ \ \n\ \ Sample\ outputs\ for\ this\ method\ are\ provided\ in\ the\ handout\ for\ this\ assignment.\n
comment6.params=args
comment6.target=void\ main(java.lang.String[])
comment6.text=\n\ \ Driver\ code,\ which\ you\ may\ NOT\ modify.\n\ \ \n\ \ Usage\:\n\ \ \ \ \ \ \ \ \ \ \ java\ A5\ <file\ name>\ neighbors\n\ \ \ \ \ \ \ \ or\n\ \ \ \ \ \ \ \ \ \ \ java\ A5\ <file\ name>\ \n
numComments=7
